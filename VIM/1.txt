The Ideal : One key stroke to Move, One Keystroke toe Execute
In all of these examples,using the dot command repeats the last change.But that's not the only thing they share.A single keystroke si al that's required to move the cursor to its next target.
We're using one keystroke to mve and one kestroke to execute.I can't really get any better than that,can it? It's anideal solution.We'll see this editing strategy coming up again and again,so for the sake of convenience,we'll refer to this pattern as the Dot Formula.
Vim provides a modal user interface.This means that the result of pressing any key on the key board my differ depending on which mode is active at the time.It's vital to know which mode is actve and how to switch between Vim's modes.In this part of the book,we'll learn how each mode works and what it can be used for.
Normal Mode
MOrmal mode is Vim's natruall resting state.If this chapter seems suprisingly short,then that's because most of this book is about how to use Normal mode!Here,however,is where we cover some core concepts and general tips.
Other text editors spend most of their time in something that resembles Insert mode.So to the Vim newcomer, it can seem strange that Normal mode is the default.In Tip 7,on page 15,we'll begin explaining why this by drawing an analogy with the workspace of a painter.
Many Normal mode commands can be executed with a count,which causes them to be run multiple times. In Tip 10,onpage 20,we'll meet a pair of commands that increment and decrement numerical values and see how these commands can be combined with a count to do cimple arithmetic.
Just because you can save keystrokes by using a count doesn't mean that you should.We'll look at some examples where it's better simply to repeat a command than take the time to count how many times you want to execute it.
Much of the power of Normal mode stems from the way that oerator commands can be combined with mothions.We'll finish by looking at the conseqences of this.
Pause with your Brush Off the Page
For those unused to Vim,Normal mode can seem like an odd default.But experienced Vim users have difficulty imagining it any other way.This tip uses an analogy to illustrate the Vim way.
How much time do you reckon artistrs spend with their paint brushes in contact with the canvas? No doubt it would vary from artist to artist,but I'd be surprised if it counted for as much as half of the time painters spend at work.
Think of all of the things that painters do besides paint.They study their subject,adjust the lighting,and mix paints into  new hues.And when it comes to applying paint to the canvas,who says they have to use brushed? A painter might switch to a palette knife to achieve a different texture or use a cotton swab to touch up the paint that's already been applied.
The painter does not rest with a brush on the canvas.And so tisi with Vim.Normal mode is the natural resting state.The clue is inthe name,really.
Just as painters spend a fraction of their time applying paint,programmers spend a fraction of their time composing code.More time is spent thinking,reading,and navigating from one part of a codebase to another.And when we do want to make a change,who says we have to swich to Insert mode?We cna reformat existing code,duplicate it ,move it around,or delete it.From Normal mode,we have many tools at our disposal.
The u key triggers the undo command,which reverts the most recent change.An change could be anything that modifies the text in the document.That includes commands triggered frome NOrmal,Visual,and Command-Line modes,but achange could also encompass any text entered(or deleted) in Insert mode.So we could also say that i {insert some text}<Esc> constitutues a change.
In nonmodal text editors,triggering the undo command after typing a few words could do one of weo things.It could undo the last character that was typed.Or,more helpfully,it could chunk a set of characters together so that each undo operation removed a word instead of a character.
In Vim,we can control the granularity of the undo command.From the moment we enter Insert mode until we return to Normal mode,everything we type(or delete) counts as a single change.So we can make the undo command operate on words,sentences, or paragraphs just by moderating our use of hte <Esc> key.
So how often should you leave Insert mode? It's a matter of preference,but I like to make wach "undoable chunk" correspond to a thought.As I write this text (in Vim,of course!), I often pause at the end of a sentence to conside what I'll write next.No matter how brief its duration, wach pauseforms a natural break point,giving me a cue to leave Insert mode.When I'm ready to continue writing,I press A and carry on where I let off.
If I decide that I've taken a wrong turn,I'll swtch to Normal mode and press u.Each time I undo,my text decomposes in coherent chunks that corresspond to my thought process as I was writing the original text.It means that I can easily try out a sentence or two and then trow them away with a couple of keystrokes.
if I'm in Insert mode wth my cursor at he end of a line,the quickest way to open a new line is to press <CR>. And yet I sometimes prefer to press <Esc>ojust becuse I anticipate that I might want that extra granularity from the undo command.If this sounds hard core,don't worry.As you become adept with Vim,switching modes feels more and more lightweight.
As a general rule,if you've paused for long enought to ask the question,"Should I leave Insert mode ?" then do it.
Moving Around in Insert Mode Resets the Change
When I said that the undo command would revert all characters entered(or deleted)during a trip into Insert mode and back,I was glossing over a small detail. If we use the <Up>,<Down>,<Left>,or <Right> cursor keys while in Insert mode,a new undo chunk is created.It's just as though we had switched back to Noraml mode to move around with the h,j,k,or l commands,except that we don't have to leave Insert mode.This also has implications on the operation of the dot command.
Compose Repeatable Changes
Vim is optimized for repetition.In order to exploit this,we have to be mindul of how we compose our changes.
In Vim,we always have more than one way of doing something.In evaluating which way is best,the most obvious metric is efficiency:which techique requires the fewest keystrokes(a.k.a. VImGolf).But how should we pick a winner in the event of a tie?
normal_mode/the_end.txt
The end is nigh
Delete Backward
Since our cursor is already at the end of the word,we might begin by deleting backward.
The end is nigh 
Pressing db deletes from the cursor's starting position to the beginning oft the word,but it leaves the final "h" intack.We can delete this rogue character by pressing x.That gives us a Vim golf score of 3.
Delete Forward
The end is nigh
We have to start by maneuvering our cursor into position with be b motion..Once it's in place,we can excise the word with a single dw command.Once again,our Vim golf score is 3.
Delete an Entire Word
Both of our solutions so far have involved some kind of preparation or cleanup.We can be more surgical by using the aw text object instead of a motion(see :h aw):
The end is
the daw command is easily remembered by the mnemonic delete a word.We'll go into more detail one text objects in Tip 51, on page 12,and Tip 52,onpage 124.
Tie-Breaker:Which Is Most Repeatable?
We've tried three techniques for deleting a word: dbx,bdw,and daw.In wach case ,our Vim golf score is 3.So how can we settle the question of which is best?
remember,Vim is optimized for repetition.Let's go through these techniques again.This time, we'll finish by invoking the dot command and see what happens. I urge you to try these out for yourself.
The backward deletion technique involves two operations:db deletes to the start of the word and then xdeletes a single character.If we invoke the dot command, it repeats the single character deletion(. == x). That's not what i would call a big win.
The forward deletion technique also involves two steps.This time,b is just a plain motion,while dw makes a change.The dot command repeats dw,deleting rom the cursor position to the beginning of the next word.It so hanppens that we're already at the end of the line. There is no "next word",so in this context the dot command isn't useful.But at least it's shorthand for something longer (. == dw).
The final solutin only invokes a single operation:daw.This technique doesn't just remove the word,it also dltes a whitespace character.As a result,our cursor ends up on the last character of the word "is" If we invoke the dot command, it will repeat the instruction to delete a word. This time,the odt command does something truly useful(.== daw).
Discussion
The daw technique invests the most power into the dot command,so I declare it the winner of this round.
Making effective use of the dot command often requires some forethought. If you notice that you have to make the same small change in a handful of places.you can attempt to compose your changes in such a way that they can be repeated with the dot command.Recognizing those opportunities takes practice.But If you develop a habit of making your changes repeatable wherever possible,then Vim will reward you for it.
Sometimes,I won't see an opportunity to use the dot command.After making a change——and finding that I need to perform an identical edit ——I realize that the dot command is primed and ready to do the work for me .It makes me grin every time.
Use Counts to Do Simple Arithmetic
Most Noraml mode commands can be executed with a count.We can exploit this feature to do simple arithmetic.
Many of the commands that are available in Nrmal mode can be prefixed with a count.Instead of executing the command just once,Vim will attempt to execute the command the specified number of times(see : h count).
The <C-a> and <C-x> commands perform addition and subtraction on numbers.
When run without a count they increment by one,but if we prefix a number,then we can add or subtract by any whole number.For example,if we possitioned our cursor on a 5 character,running 10<C-a>would modify it to read 15.
But what happends if the cursor is not positioned on a numeric digit? The documentation says that the <C-a> command will "add [count] to the number at or after the cursor" (see :h ctrl-a).So if the cursor is not already positioned on a number,then the <C-a> command will look ahead for a digit on the curent line.If it finds one,it jumps straight to it. We can use this to our advantage.
Here's a snippet of CSS:
normal_mode/sprite.css
.blog, .news{backgournd-image:url(/sprite.png);} 


.blog{background-position:0px 0px}
We're going to duplicate the last line and make two small modifications to it:replace the word "blog" with "news" and change "0px" to "-180px". We can duplicate the line by running yyp and then using cw to change the first word.
But how should we deal with that number?
.news{background-position:-180px -360px}
.blog{background-position:0px 0px}
Number Formats
What follows 007?No,this isn't a James Bond gag;I'm asking what result would you expect if you added one to 007.
If you answered 008,then you might be in fr a surprise when you try using Vim's <C-a> command on any number with a leading zero.As is the convention in some programming languages,Vim interprets numerals with a leading zero to be in octl notation rather than in decimal.In the octal numeric system,007 + 001 = 010,which looks like the decimal ten but is actually an octal eight.Confused?
If you work with octal numbers frequently,Vim's default behavior might suit you.If you don't,you probably want to add the following line to your vimrc:
set nrformats=
This will cause Vim to treat all numerals as decimal,regardless of whether they are padded with zeros.
Don't Count if you Can Repeat
We can miimize the keystrokes required to perform certain tasks by providing a count,but that doesn't mean that we should.Consider the pros and cons of counting veruss repeating.
Suppose that we had the following text in our buffer:
Delete more than one word
We want to do as the text says,changing it to read"Delete one word" instead.Thisis to say,we're going to delete two words.
We can approach this in a handful of ways.Both d2w and 2dw will word.With d2w,we invoke the delete command an then give 2w as the motion.We could read that as "delete two words." However,2dw truns things around. This time the count applies to the delete command,but the motion acts over a single word.We could read this as "delete a word two times." Putting semantics aside,we get the same result either way.
Now let's consider an alternative:dw.This we can read as "Delete a word and then repeat."
To recap,our options are as follows:d2w,2dw,or dw.——three keystrokes each.But which is best?
For our discussion,d2w and 2dw and identical.After running either of these , we can press the u key to undo,and the two words that were deleted will appear again.Or, instead of undoing our change,we could repeat it with the dot command,which would delete the next two words.
In the case of dw..the result of pressing u or . is subtly different.Here,the change wa dw——"delete word." So if we wanted to restore the two words that were deleted ,we'd have to undo twice:pressing uu (or 2u if you prefer). Pressing the dot command would just delete the next word rather than the next two.
Now suppose that instead of deleting two words,our original intent was to delete three words.By a small error in judgment,we run d2w instead of d3w.What next? We can't use the odt command,beacuse that would cause a total of four words to be deleted .So we could either back up and revise our count(ud3w) or continue by deleting the next word(dw).
Now suppose that instead of deleting two words,our original intent was to  delete three words.By a small error in judgment,we run d2w instead of d3w.
If,on the other hand,we had used the command dw.in the frst place,we would have to repeat the dot command only one more time.Because our original change was simply dw,the u and . commands have more granularity.
Each acts upon one word at a time.
Now suppose that we want to delete seven words.We could either run d7w,or dw......(that is ,dw followed by the dot command six times).Counting keystrokes, we have a clear winner.But would you trust yourself to make the right count?
Counting is tedious.I'd rather hit the dot command six times than spend the same time looking ahead in order to reduce the number of keys that I have to press.What if I hit the dot command one too many times? No matter,I just back p by hitting the u key once.
Remember our mantra(from Tip4,on page 8): act,repeat,reverse.Here it is in actin.
Use a Count When It Matters
Suppose that we wanted to change the text "I have a couple of questions" to instead read"I hove some more questions." We could do so as follows:
I have some more questions
Use a Count When It Matters
In this scenario, it doesn't makemuch sense to use the dot command.We could delete one word and then anther (with the dot command), but then we'd have to switch gears and change to Insert mode (using i or cw, for example).To me ,that feels awkward enough that I'd rather go ahead and use a count.
There's another advantage to using a count: it gives us a clean and coherent undo history.Having made this change,we could undo it with a single press of the u key,which ties in with the discussion in Tip 8,on page 16.
that same argument also goes in favor of counting (d5w) over repeating (dw....), so my preferences may seem inconsistent here. You'll develop your own opinion on this ,depending on how much you value keeping your undo history clean and whether or not you find it tiresome to use counts.
Combine and Conquer
Much of Vim's power stems from the way that operators and motions canbe combined.In this tip,we'll look at how this works and consider the implications.
Operator + Motion = Action
The d{motion} command can operate on a single character(dl), a complete word(daw), or an entire paragraph(dap).Its reach is defined by the motion.The same goes for c{motion},y{motion},and a handful of others.Collecively,these commands are called operators.You can find the complete list by looking up :h operator, while Table 2,Vim's Operator Commands ,on page 25,summarizes some of the more common ones.
the g~,gu and gU commmands are invoked by rwo keystrokes. In each case,we can consider the g to be a prefix that modifies the behavior of the subsequent keystroke.See Meet Operator -Pending Mode,on page 26,for further discussion.
The Combination of operators with motions forms a kind of grammar.The first urle is simple: an action is composed from an operator followed by a motion. Learning new motions and operators is like learning the vocabulary of Vim.If we follow the wimple grammar rules, we can express more ideas as our vocabulary grows.`
Suppose that we already know how to delete a word using daw,and then we learn about the gU Command (see :h gU). It's an operator too,so we can invoke gUaw to convert the current word to SHOUTY case.If we then expand our vocabulary to inclde the ap motion,which acts upon a paragraph, then we find two new operations at our disposal: dap to delete,or gUap to make the whole paragraph shout.
Vim's grammar has just one more rule:when an operator command is invoked in duplicate,it acts upon the current line.So dd deletesthe current line,while >> indents it.The gU command is a special case.We can make it act upon the current line by running either gUgU or the shorthand gUU.
Trigger Effect
C   Change
d   Delete
y   Yank into register
g~  Swap case
gu  Make lowercase
gU  Make uppercase
>   Shift right
<   Shift left
=   Autoindent
!   Filter{motion} lines through an external program
Extending Vim's Combinatorial Powers
The number of actions that we can perform using Vim's default set of operators and motions is vast.But we can expand these event further by rolling our own custom motins and operators.Let's consider the implications.
Custom Operators Work with Existing Motions
The standard set of operators that ships with Vim is relatively small,but it is possible ot define new ones. Time Pope's commentary.vim plugin provides a good example.This adds a command for commenting and un commenting lines of code in all languages supported by Vim.
The commentary command is triggered by \\{motion}, which toggles commenting for the specified lines.It's an operator command,so we can combine it with all of the usual motions.\\ap will toggle commenting for the current paragraph.\\G comments from the current line to the end of the file.\\\comments the current line.
If you're curious about how to create your own custom operators,start by reading :h :map-operator.
Custom Motions Work with Existing Operators
Vim's standard set of motions is fairly comprehensive,but we can augment it further by defining new motins and text objects.
Kana Natsuno's textobj-entire plugin is a good example.It adds two next tet objects to VIm:ie and ae,which act pon the entire file.
If we wanted to autoindent the entire file using the = command,we could run gg=G (that is ,gg to jump to the top of he file and the =G to autoindent everything from the cursor position to the end of the file). But if we had the textobj-entire plugin installed,we could simply run =ae.It wouldn't matter where our cursor was when we ran this command;it would always act upon the entire file.
Note that if we had both the commentary and textobj-entire plugins installed.we could use them together.Running \\ae would toggle commenting ghroughout the currnet file.
If you're curious about howto create your won custom motions,start by reading :h omap-info.
